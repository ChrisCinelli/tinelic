<!DOCTYPE html>
<html>
<head>
<title>Hey, wei!</title>
<script src="//cdnjs.cloudflare.com/ajax/libs/require.js/2.1.15/require.js"></script>
<script src="//code.jquery.com/jquery-2.1.3.js"></script>
<script>
requirejs.config({
    baseUrl: "app",
    paths:{
		"tinybone":"../tinybone",
		"lodash":"//cdnjs.cloudflare.com/ajax/libs/lodash.js/2.4.1/lodash",
		"dust":"//cdnjs.cloudflare.com/ajax/libs/dustjs-linkedin/2.5.1/dust-core"
	},
	shim: {
		'dust': {
			exports: 'dust'
		}
	}
})
</script>
</head>
<body>
<div id="content">
{@view name=_t_main_view /}
</div>
<script>
requirejs(["routes","lodash","dust","safe","app"], function (routes,_,dust,safe,app) {
/**
 * URL Router
 * @param {String} url, routing url.
 *  e.g.: /user/:id, /user/:id([0-9]+), /user/:id.:format?
 * @param {Boolean} [strict] strict mode, default is false.
 *  if use strict mode, '/admin' will not match '/admin/'.
 */
function Router(url, strict) {
  this.keys = null;
  if (url instanceof RegExp) {
    this.rex = url;
    this.source = this.rex.source;
    return;
  }

  var keys = [];
  this.source = url;
  url = url.replace(/\//g, '\\/') // '/' => '\/'
  .replace(/\./g, '\\.?') // '.' => '\.?'
  .replace(/\*/g, '.+'); // '*' => '.+'

  // ':id' => ([^\/]+),
  // ':id?' => ([^\/]*),
  // ':id([0-9]+)' => ([0-9]+)+,
  // ':id([0-9]+)?' => ([0-9]+)*
  url = url.replace(/:(\w+)(?:\(([^\)]+)\))?(\?)?/g, function (all, name, rex, atLeastOne) {
    keys.push(name);
    if (!rex) {
      rex = '[^\\/]' + (atLeastOne === '?' ? '*' : '+');
    }
    return '(' + rex + ')';
  });
  // /user/:id => /user, /user/123
  url = url.replace(/\\\/\(\[\^\\\/\]\*\)/g, '(?:\\/(\\w*))?');
  this.keys = keys;
  var re = '^' + url;
  if (!strict) {
    re += '\\/?';
  }
  re += '$';
  this.rex = new RegExp(re);
}

/**
 * Try to match given pathname, if match, return the match `params`.
 *
 * @param {String} pathname
 * @return {Object|null} match `params` or null.
 */
Router.prototype.match = function (pathname) {
  var m = this.rex.exec(pathname);
  // console.log(this.rex, pathname, this.keys, m, this.source)
  var match = null;
  if (m) {
    if (!this.keys) {
      return m.slice(1);
    }
    match = {};
    var keys = this.keys;
    for (var i = 0, l = keys.length; i < l; i++) {
      var value = m[i + 1];
      if (value) {
        match[keys[i]] = value;
      }
    }
  }
  return match;
};

var paths = [];
_.each(routes, function (v,k) {
	paths.push(new Router(k,false))
})

  function resolveUrl(/* ...urls */) {
    var numUrls = arguments.length

    if (numUrls === 0) {
      throw new Error("resolveUrl requires at least one argument; got none.")
    }

    var base = document.createElement("base")
    base.href = arguments[0]

    if (numUrls === 1) {
      return base.href
    }

    var head = document.getElementsByTagName("head")[0]
    head.insertBefore(base, head.firstChild)

    var a = document.createElement("a")
    var resolved

    for (var index = 1; index < numUrls; index++) {
      a.href = arguments[index]
      resolved = a.href
      base.href = resolved
    }

    head.removeChild(base)

    return resolved
  }


$("body").on("click","a", function (e) {
	e.preventDefault();
	$this = $(this);
	var uri = resolveUrl($this.attr("href"));
	uri = uri.replace(window.location,"/");
	function next (err) {
		if (err) console.log(err);
	}
	_.each(paths, function (p) {
		var match = p.match(uri);
		if (match) {
			var v = routes[p.source];
			requirejs(['routes/'+v,"app"],function (route,app) {
				route(safe.sure(next,function (res) {
					requirejs(['views/'+res.view], function (View) {
						var view = new View(app);
						view.data = res.data;
						view.render(safe.sure(next, function (text) {
							$("#content").html(text);
						}))
					},next)
				}))
			})
		}
	})
	return false;
})

})
</script>
</body>
</html>
